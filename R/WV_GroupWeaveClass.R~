### Define class GroupWeave and corresponding methods
#' @include AA_sampleVectorClass.R
NULL

#' GroupWeave class
#'
#'  This function defines and produces a GroupWeave object. The difference between weave and GroupWeave is their way to apply FUN. In weave, FUN is applied to every single column; while in GroupWeave, FUN takes the whole columns in a group as argument. If FUN choosen ``mad'', interval (0, 1) and ifeq ``>'', MADWeave is much faster.
#'
#' @param dataset A sampleVector object containing data and other information.
#' @param degree A degree-th polynomail logistic regression is fitted.
#' @param FUN Function used in GroupWeave.
#' @param interval A value between 0 and 1 to restrict the rankit used.
#' @param ifeq Use >= or >?
#' @return A GourpWeave object.
#' @examples
#' data(GCwPADataA)
#' t1 = sampleVector(GCwPADataA, selCol = list(1:5, 11:15, 21:25), labels = c("E", "R", "T"), dataType = "Example")
#' MADRes = GroupWeave(dataset = t1, degree = 6, interval = c(0, 1), FUN = "mad", ifeq = TRUE)
#' @export

GroupWeave = function(dataset = testset, degree = 6, interval = c(0, 1), FUN = "mad", ifeq = FALSE)
{
    if(!is(dataset, "sampleVector")) stop("Invalid dataset input")
    mydata = dataset$data
	selCol = dataset$selCol
	colInd = dataset$colInd
    nweave = dataset$nGroup
    nrow = dataset$nRow

    newX = MatRankit(mydata)
    myOd = Cpp_order(newX) + 1

    selInd = which((newX <= max(interval)) & (newX >= min(interval)))
    newX = newX[selInd]
    polyx = poly(newX, degree = degree, raw = TRUE)

    fitY = lapply(1:nweave, function(idcol) {
        y = sapply(1:nrow, function(i) as.numeric(get(ifelse(ifeq, ">=", ">")) (match.fun(FUN)(mydata[i, colInd[[idcol]]]), match.fun(FUN)(mydata[i, -colInd[[idcol]]]))))
        newY = y[selInd]
        predict(glm(newY ~ polyx, family = "binomial"), type = "response")
        })

    res = list()
    names(fitY) = 1:nweave
    res$fitY = fitY
    res$selCol = selCol
    res$labels = dataset$labels
    res$dataType = dataset$dataType
    res$order = myOd
    res$nweave = nweave
    res$rankit = newX
    res$interval = interval
    res$Function = FUN
    res$ifeq = ifelse(ifeq, ">=", ">")
    res$colInd = colInd
    class(res) = "GroupWeave"
    return(res)
}

#' Produce a weave object.
#'
#' This function use ``mad'' to produce a GroupWeave object, with ``>'' and interval (0, 1), which is much faster.
#'
#' @param dataset A sampleVector object containing data and other information.
#' @param degree A degree-th polynomail logistic regression is fitted.
#' @return A GroupWeave object.
#' @examples
#' data(GCwPADataA)
#' testset = sampleVector(GCwPADataA, selCol = list(1:5, 11:15, 21:25), labels = c("E", "R", "T"), dataType = "Example")
#' gw1 = MADWeave(dataset = testset, degree = 6)
#' @export

MADWeave = function(dataset = testset, degree = 4)
{
    if(!is(dataset, "sampleVector")) stop("Invalid dataset input")
    mydata = dataset$data
	selCol = dataset$selCol
	colInd = dataset$colInd
    nweave = dataset$nGroup
    nrow = dataset$nRow

    newX = MatRankit(mydata)
    myOd = Cpp_order(newX) + 1

	res = list()
	polyx = poly(newX, degree = degree, raw = TRUE)
	fitY = lapply(1:nweave, function(ref) {
		cat(" ", ref, "\t out of ", nweave, "\n")
		y = MADWVY(mydata, colInd[[ref]] - 1)
		predict(glm(y ~ polyx, family = "binomial"), type = "response")
	})

	names(fitY) = 1:nweave
	res$fitY = fitY
	res$selCol = dataset$selCol
    res$labels = dataset$labels
    res$dataType = dataset$dataType
    res$order = myOd
    res$nweave = nweave
    res$rankit = newX
	res$interval = c(0, 1)
    res$Function = "mad"
    res$ifeq = ">"
    res$colInd = colInd
    class(res) = "GroupWeave"
    return(res)
}

#' Print method of GroupWeave class.
#'
#' @param obj A weave object.
#' @export

print.GroupWeave = function(obj)
{
    cat("This is a GroupWeave object.\n")
    cat("Data type: ", obj$dataType, ". Function:", obj$Function, ",", obj$ifeq, ".")
	cat("Rankit interval: (", paste0(obj$interval, collapse = ", "), "). \n")
    cat(paste0("Total Weaves: ", obj$nweave, ".\n"))
    cat(paste0("Contains: ", paste0(obj$labels, collapse = ", "), ".\n"))
}


#' The plot method for a GroupWeave object.
#'
#' @param obj A GroupWeave object.
#' @param indSet The index set specifying the weaves of which groups to be plot.
#' @param legPar A list of legend parameters.
#' @param graPar A list of global graphics parameters.
#' @param plotPar A list of background (including main title) parameters.
#' @return NULL
#' @examples
#' data(GCwPADataA)
#' testset = sampleVector(GCwPADataA, selCol = list(1:5, 11:15, 21:25), labels = c("E", "R", "T"))
#' MADw1 = GroupWeave(dataset = testset, degree = 6)
#' plot(MADw1, indSet = 1:2, legPar = list(cex = 1, ncol = 1), plotPar = list(main = "Example"))
#' @export
plot.GroupWeave = function(obj, indSet = 1:obj$nweave, legPar = list(cex = 0.6, ncol = 3), graPar = list(), plotPar = list())
{
    refset = 1:length(obj$colInd)
    parDe = par(graPar)
    on.exit(par(parDe))

    do.call("plot", paraMerge(list(x = obj$interval, y = c(0.5, 0.5), xlab = "Rankit", ylab = paste0("Pr(", obj$Function, "(samples)", obj$ifeq, obj$Function, "(other samples))"), xlim = obj$interval, ylim = c(0, 1), type = "l", col = "gray", lty = 10), plotPar))
    if(is.null(legPar$ifleg) || legPar$ifleg)
    {
        legLoc = NULL
        if(is.null(legPar$x)) legLoc = c(mean(obj$interval), 1.04)
        legPar$ifleg = NULL
        do.call("legend", paraMerge(list(x = legLoc[1], y = legLoc[2], legend = obj$labels, lty = 1, col = refset), legPar))
    }

	fitY = obj$fitY
    x = obj$rankit
	myOd = obj$order

	newX = x[myOd]
	sapply(indSet, function(i) {
		lines(x = newX, y = fitY[[i]][myOd], col = refset[i])
		})
    grid()
    invisible()
}

