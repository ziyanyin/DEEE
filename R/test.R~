#' @include AA_sampleVectorClass.R
NULL

#' Produce a weave object.
#'
#' test
#'
#' @param dataset A sampleVector object containing data and other information.
#' @param degree A degree-th polynomail logistic regression is fitted.
#' @param FUN Function used in weave.
#' @param interval A value between 0 and 1 to restrict the rankit used.
#' @param ifeq Use >= or >?
#' @return A weave object.
#' @examples
#' data(GCwPADataA)
#' testset = sampleVector(GCwPADataA, sampleSelect = list(1:5, 11:15, 21:25), labels = c("E", "R", "T"), dataType = "Example")
#' MedWeave = nweave(dataset = testset, degree = 6, FUN = "median")
#' @export

nweave = function(dataset = testset, degree = 4, FUN = "median")
{
	if(!is(dataset, "sampleVector")) stop("Invalid dataset input")
    mydata = sv2m(dataset)

    nweave = ncol(mydata)
    nrow = nrow(mydata)

    newX = MatRankit(mydata)
    myOd = Cpp_order(newX)
	
	res = list()
	polyx = poly(newX, degree = degree, raw = TRUE)
	fitY = lapply(1:nweave, function(ref) {
		cat(" ", ref, "\t out of ", nweave, "\n")
		y = MedWVY(mydata, ref - 1)
		predict(glm(y ~ polyx, family = "binomial"), type = "response")
	})

	names(fitY) = 1:nweave
	res$fitY = fitY
	res$sampleSelect = dataset$sampleSelect
    res$labels = dataset$labels
    res$dataType = dataset$dataType
    res$order = myOd
    res$nWeave = nweave
    res$rankit = newX
    res$Function = FUN
    res$ifeq = ">"
    class(res) = "weave"
    return(res)
}

