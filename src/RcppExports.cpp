// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Cpp_FDR
std::vector<int> Cpp_FDR(std::vector<double>& p, const float FDR);
RcppExport SEXP DEEE_Cpp_FDR(SEXP pSEXP, SEXP FDRSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double>& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const float >::type FDR(FDRSEXP);
    __result = Rcpp::wrap(Cpp_FDR(p, FDR));
    return __result;
END_RCPP
}
// Cpp_fvalue
std::vector<double> Cpp_fvalue(const std::vector<std::vector<double> >& myData);
RcppExport SEXP DEEE_Cpp_fvalue(SEXP myDataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector<std::vector<double> >& >::type myData(myDataSEXP);
    __result = Rcpp::wrap(Cpp_fvalue(myData));
    return __result;
END_RCPP
}
// Cpp_fvalues
std::vector<double> Cpp_fvalues(std::vector<NumericMatrix>& lm);
RcppExport SEXP DEEE_Cpp_fvalues(SEXP lmSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<NumericMatrix>& >::type lm(lmSEXP);
    __result = Rcpp::wrap(Cpp_fvalues(lm));
    return __result;
END_RCPP
}
// Cpp_plotMat
std::vector<std::vector<float> > Cpp_plotMat(const int nfig, const int figcol, const float xshrink, const float yshrink);
RcppExport SEXP DEEE_Cpp_plotMat(SEXP nfigSEXP, SEXP figcolSEXP, SEXP xshrinkSEXP, SEXP yshrinkSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nfig(nfigSEXP);
    Rcpp::traits::input_parameter< const int >::type figcol(figcolSEXP);
    Rcpp::traits::input_parameter< const float >::type xshrink(xshrinkSEXP);
    Rcpp::traits::input_parameter< const float >::type yshrink(yshrinkSEXP);
    __result = Rcpp::wrap(Cpp_plotMat(nfig, figcol, xshrink, yshrink));
    return __result;
END_RCPP
}
// Cpp_median
double Cpp_median(const std::vector<double> lm);
RcppExport SEXP DEEE_Cpp_median(SEXP lmSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector<double> >::type lm(lmSEXP);
    __result = Rcpp::wrap(Cpp_median(lm));
    return __result;
END_RCPP
}
// Cpp_MAD
double Cpp_MAD(const std::vector<double> l);
RcppExport SEXP DEEE_Cpp_MAD(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector<double> >::type l(lSEXP);
    __result = Rcpp::wrap(Cpp_MAD(l));
    return __result;
END_RCPP
}
// Cpp_order
std::vector<int> Cpp_order(const std::vector<double>& vec);
RcppExport SEXP DEEE_Cpp_order(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vec(vecSEXP);
    __result = Rcpp::wrap(Cpp_order(vec));
    return __result;
END_RCPP
}
// Cpp_rank
std::vector<int> Cpp_rank(const std::vector<double>& vec);
RcppExport SEXP DEEE_Cpp_rank(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vec(vecSEXP);
    __result = Rcpp::wrap(Cpp_rank(vec));
    return __result;
END_RCPP
}
// MedWVY
std::vector<bool> MedWVY(const NumericMatrix& mat, const std::vector<int>& ref);
RcppExport SEXP DEEE_MedWVY(SEXP matSEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type ref(refSEXP);
    __result = Rcpp::wrap(MedWVY(mat, ref));
    return __result;
END_RCPP
}
// MADWVY
std::vector<bool> MADWVY(const NumericMatrix& mat, const std::vector<int>& ref);
RcppExport SEXP DEEE_MADWVY(SEXP matSEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type ref(refSEXP);
    __result = Rcpp::wrap(MADWVY(mat, ref));
    return __result;
END_RCPP
}
// MatRankit
std::vector<double> MatRankit(const NumericMatrix& mat);
RcppExport SEXP DEEE_MatRankit(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    __result = Rcpp::wrap(MatRankit(mat));
    return __result;
END_RCPP
}
